/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cas_project;

import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author NEW
 */
public class funcs extends javax.swing.JFrame {

    /**
     * Creates new form funcs
     */
    public funcs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(funcs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(funcs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(funcs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(funcs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new funcs().setVisible(true);
            }
        });
    }
    
    public void logOut(){
        Welcome me = new Welcome();
        me.show();
//        this.dispose();
    }

    public String[] getDepartmentCourses(String dept) {
        String options[];
        String[] options3 = {};
        options = new String[100];

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select * from courses where department = ?");
            ps.setString(1, dept);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String course_id = rs.getString(1);
                options[i] = course_id;
                i += 1;

            }
            String options2[];
            options2 = new String[i];
            int k = 0;
            while (k < i) {
                options2[k] = options[k];
                k++;
            }
            options3 = options2;

        } catch (Exception e) {
            System.out.println("");
        }
        return options3;
    }

    public String[] getStudents(String course_id, String dept) {
        String students[];
        students = new String[100];
        String output[] = {};
        System.out.println(course_id);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select * from enrollment where course_id = ? and department=?");
            ps.setString(1, course_id);
            ps.setString(2, dept);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String student = rs.getString(2);
                students[i] = student;
                i += 1;
            }

            String options2[];
            options2 = new String[i];
            int k = 0;
            while (k < i) {
                options2[k] = students[k];
                k++;
            }
            output = options2;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        return output;
    }

    public String[] getSession(String course_id, String dept) {
        String sessions[];
        sessions = new String[100];
        String output[] = {};

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select * from session where course_id = ? and class_dept=?");
            ps.setString(1, course_id);
            ps.setString(2, dept);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String session = rs.getString(1);
                sessions[i] = session;
                i += 1;
            }
            String options2[];
            options2 = new String[i];
            int k = 0;
            while (k < i) {
                options2[k] = sessions[k];
                k++;
            }
            output = options2;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        return output;
    }

    public void getAttendanceNum(String[] students, String[] sessions, JTextArea jTextArea) {
        int numStudent = students.length;
        int numSession = sessions.length;
        int attendance[];
        attendance = new int[numStudent];
        String text = "S/N  | Mat no\t        | Name\t   | Attendance\n";
        int sn = 0;
        for (int i = 0; i < numStudent; i++) {
            int count = 0;
            for (int j = 0; j < numSession; j++) {
                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
                    PreparedStatement ps = con.prepareStatement("select * from attendance where student_id = ? and session_id=?");
                    ps.setString(1, students[i]);
                    ps.setString(2, sessions[j]);
                    ResultSet rs = ps.executeQuery();

                    while (rs.next()) {
                        count += 1;
//                        System.out.print(count);
                    }
                } catch (Exception e) {

                }
            }
//            attendance[i] = count;
            sn++;
            System.out.print(count);
            float percentage_attendace = (count / (float)numSession) * 100;
            String name = new Lecturer().getStudentName(students[i]);
            text += sn + "      | " + students[i] + " | " + name + " | " + percentage_attendace + "%" + "\n";
            jTextArea.setText(text);

//            k++;
        }
    }
    
        public String[] getLecturerDepartments(String staff_id, String course) {
        String options[];
        options = new String[100];
        String options3[] = {};
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select * from lecturer_per_course where staff_id = ? and course_id = ?");
            ps.setString(1, staff_id);
            ps.setString(2, course);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                String dept = rs.getString(4);
                options[i] = dept;
                i += 1;

            }
            String options2[];
            options2 = new String[i];
            int k = 0;
            while (k < i) {
//                System.out.println(k);
                options2[k] = options[k];
                k++;
            }
            options3 = options2;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        return options3;
    }
        
    public String[] showCourses(String staff_id) {
//        String options[];
//        options = new String[100];
//        String options3[] = {};

        Set<String> options = new HashSet<String>();
        

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select * from lecturer_per_course where staff_id = ?");
            ps.setString(1, staff_id);
            ResultSet rs = ps.executeQuery();
            int i = 0, j = 0;
            while (rs.next()) {
                String course_id = rs.getString(3);
                String dept = rs.getString(4);
                options.add(course_id);

            }

        
        } catch (Exception e) {
            System.out.println("");
        }
        String arr[] = new String[options.size()];
        return options.toArray(arr);
    }

    public String[] getCoursesEnrolled(String mat_no) {
        int numCourses = 0;
        String courses_list[] = {};

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cas_project", "root", "mysqlroot");
            PreparedStatement ps = con.prepareStatement("select count(course_id) from enrollment where student_id = ?");

            ps.setString(1, mat_no);
            ResultSet rs = ps.executeQuery();
            int i = 0;
            while (rs.next()) {
                numCourses = rs.getInt(1);
            }
            courses_list = new String[numCourses];

            PreparedStatement ps1 = con.prepareStatement("select * from enrollment where student_id = ?");
            ps1.setString(1, mat_no);
            ResultSet rs1 = ps1.executeQuery();
            String text = "";
            while (rs1.next()) {
                String course_id = rs1.getString(3);
                courses_list[i] = course_id;
//                text += courses_list[i] + "\n";
                i += 1;
            }
            con.close();
//            jTextArea2.setText(text);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        return courses_list;
    }

    public String Hash(String c) {
        try {
            MessageDigest msgDigest = MessageDigest.getInstance("MD5");
            msgDigest.update((new String(c)).getBytes("UTF8"));
            String passHash = new String(msgDigest.digest());
            return passHash;
        } catch (Exception ex) {

            return c;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
